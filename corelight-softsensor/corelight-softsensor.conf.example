# You only need to set the following value if the hostname the system has already is
# not an acceptable name to use in the logs and other export locations.
#Corelight::system_name       corelight-sniff01

# Below is an example "sniff" option.  Interfaces are separated with commas and the number 
# of workers is optionally specified after the interface with a tilde (~).
# If the "corelight" process is already started, once this option is configured, the cluster
# will automatically start up. You don't need to take any additional action.
#Corelight::sniff             eth0~4,eth1~2
Corelight::sniff             

# Corelight::disk_space is the base directory or directory root for the Software Sensor.  All relative
# paths configured below will be based on this directory.
# You likely don't want to change this. By default, the packaged (RPM/DEB) versions of
# the Corelight Software Sensor create this location.
#Corelight::disk_space        /var/corelight

# Corelight::enable_broker_ssl controls whether communications made in the Zeek broker
# framework are encrypted or not. You probably don't want to change this setting unless
# communications will transit between multiple systems. The default value is
# false (communications are not encrypted). 
# Corelight::enable_broker_ssl F

# If you would like to avoid sharing stats with Corelight for debugging and health
# monitoring purposes, change this value to "F".
Corelight_Cloud::share_stats T

# Local networks
Site::local_nets             10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,100.64.0.0/10,127.0.0.0/8,fe80::/10,fc00::/7,::1/128

# Zeek script(s) to load. This can normally be left alone and you can edit the local.zeek
# script to load additional scripts.
Corelight::load_scripts      /etc/corelight/local.zeek

# A BPF filter of traffic that you would like to ignore.
Corelight::ignore_bpf        

# The amount of memory in Megabytes that you'd like to set as a maximum allowed per process.
# This can prevent accidental script mistakes or unexpected side effects from completely taking
# over all memory on your system.
Corelight::memory_limit_mb   6500


##############################
# Corelight Content Packages #
##############################

# A Corelight package for TLS certificate hygiene. It generates a series of notice log entries
# for various TLS certificate issues.
CorelightPackages::cert_hygiene_enable          F

# Suppress or reduce uninteresting logs
CorelightPackages::datared_enable               F

# Detect generic DNS tunnels
CorelightPackages::dns_tunnels_enable           F

# A Corelight package for flagging known encrypted DNS servers which it will indicate with an 
# additional field in the SSL log.
CorelightPackages::encrypted_dns_enable         F

# A Corelight package that generates the following:
#    - A log with additional context on the type of encryption/encoding observed.
#    - Notices that indicate cleartext traffic over usually encrypted ports or instant 
#      encryption (i.e. use of cryptography without a handshake / negotiation).
CorelightPackages::encryption_detection_enable  F

# A Corelight package that contains inference logic to detect Custom C2 activity over HTTP, as well 
# as hygiene inferences that may be useful as building blocks to build further detections based on
# unique or anomalous HTTP C2 behavior.
CorelightPackages::http_c2_enable               F

# A Corelight package that detects ICMP tunnels and shells.
CorelightPackages::icmp_tunnels_enable          F

# A Corelight package that enables automatic extraction and aggregation of individual network entities
CorelightPackages::known_entities_enable        F

# Infers IPv4/v6 space considered local to the site
CorelightPackages::local_subnets_enable         F

# A Corelight package that detects Meterpreter formatted headers in TCP connections by sampling 
# packets in each connection.
CorelightPackages::meterpreter_enable           F 

# Add severity.name and severity.level fields to the notice log stream
CorelightPackages::notice_severity_enable       F

# A Corelight package that extends the existing RDP analysis available in open source Zeek and the 
# RDP package. For TLS encrypted connections, it provides client, authentication, and behavioral 
# inferences.
CorelightPackages::rdp_inference_enable         F

# A Corelight package that provides insights into activity in SSH traffic by extending the SSH log.
CorelightPackages::ssh_inference_enable         F 

# A Corelight package that detects series of intermediary hosts connected via SSH, reporting these 
# in a new log.
CorelightPackages::stepping_stones_enable       F 

# A Corelight package that augments conn.log with hostnames for IP addresses where relevant hostname
# to IP address mappings can be discovered.
CorelightPackages::namecache_enable             F

# Instructs the Corelight Sensor to shunt (ignore) certain traffic
# Shunted traffic will not be processed or logged, which reduces CPU utilization.
# Valid status values are off | dry-run | on
# dry-run will not shunt, but will log in the conn.log what would have been shunted
Corelight::shunt_status                         off


#######################################
# ICS Protocol Parser Plugin Packages #
#######################################

# DEPRECATED
# A package that enables metadata extracted from BACnet traffic on UDP port 47808.
# Corelight::amazon_bacnet_enable                    F

# DEPRECATED
# A package that enables metadata extracted from Ethernet/IP and Common Industrial
# Protocol traffic on UDP port 2222 and TCP/UDP port 44818.
# Corelight::amazon_enip_enable                      F

# A package that enables metadata extracted from PROFINET traffic on UDP port 34964.
Corelight::amazon_profinet_enable                  F

# DEPRECATED
# A package that enables metadata extracted from ISO COTP and Siemens S7 traffic on UDP
# port 102.
# Corelight::amazon_s7comm_enable                    F

# A package that enables metadata extracted from any Tabular Data Stream traffic on UDP
# port 1433.
Corelight::amazon_tds_enable                       F

# A package that analyzes the BACnet (Building Control and Automation) protocol.
Corelight::icsnpp_bacnet_enable                    F

# A package for the BSAP (Bristol Standard Asynchronous Protocol) over IP protocol.
Corelight::icsnpp_bsap_enable                      F

# A package for the Ethercat protocol.
Corelight::icsnpp_ethercat_enable                  F

# A package for the Ethernet/IP and CIP protocols.
Corelight::icsnpp_enip_enable                      F

# A package for the Genisys protocol.
Corelight::spicy_genisys_enable                    F

# A package for the OPCUA Binary protocol.
Corelight::icsnpp_opcua_binary_enable              F

# A package for the S7comm, S7comm-plus, and COTP protocols.
Corelight::icsnpp_s7comm_enable                    F

# A package to extend Zeek's DNP3 support.
Corelight::icsnpp_dnp3_enable                      F

# A package to extend Zeek's Modbus support.
Corelight::icsnpp_modbus_enable                    F


#######################
# Protocol Analyzers  #
#######################

# An IPsec protocol analyzer based on Spicy
Corelight::spicy_ipsec_enable                      F

# An OpenVPN protocol analyzer based on Spicy
Corelight::spicy_openvpn_enable                    F

# A STUN protocol analyzer based on Spicy
Corelight::spicy_stun_enable                       F

# A Wireguard protocol analyzer based on Spicy
Corelight::spicy_wireguard_enable                  F

# An LDAP protocol analyzer based on Spicy
Corelight::spicy_ldap_enable                       F

# A GENA protocol analyzer based on Spicy
Corelight::spicy_gena_enable                       F

# An SSDP protocol analyzer based on Spicy
Corelight::spicy_ssdp_enable                       F

#####################################
# Additional Included Zeek Packages #
#####################################

# A Corelight-created Zeek package which raises notices for a series of Log4J exploit attempts. 
Packages::log4shell_detector_enable             F

# Application recognizers added to the conn log
CorelightPackages::application_identification_enable    F

# BZAR is a set of Zeek scripts utilizing the SMB and DCE-RPC protocol analyzers and the File 
# Extraction Framework to detect ATT&CK-like activity, raise notices, and write to the notice log.
Packages::bzar_enable                           F

# Detects Bitcoin, Litecoin, or other cryptocurrency mining traffic that uses getwork, 
# getblocktemplate, or Stratum mining protocols over TCP or HTTP. Raises a series of notices 
# prefixed with "Bitcoin".
Packages::cryptomining_enable                   F

# Enables the script that is shipped with Zeek that detects and logs traceroute activity into the
# "traceroute" log stream.
Packages::detect_traceroute_enable              F

# Detect potentially-dangerous SMBv1 protocol violations that encapsulate bugs exploited by the 
# infamous Eternal* family of Windows exploits. This creates a series of notices prefixed with
# "EternalSafety".
Packages::eternal_safety_enable                 F

# JA3 is a method for creating SSL/TLS client fingerprints that should be easy to produce on any
# platform and can be easily shared for threat intelligence.
Packages::ja3_enable                            F

# HASSH is a network fingerprinting standard that can be used to identify specific Client and 
# Server SSH implementations. The fingerprints can be stored, searched and shared in the form 
# of an MD5 fingerprint.
Packages::hassh_enable                          F

# This package adds support for unencrypted HTTP/2 traffic analysis. When loaded, it generates 
# a new log stream named "http2".
Packages::http2_enable                          F

# This package provides a new log stream name "conn_long" which will log 'intermediate' (as 
# opposed to complete) conn logs.
Packages::long_connections_enable               F

# Simple, high performance TCP scan detection.
Packages::simple_scan_enable                    F

# Sliver C2 detection (requires ja3)
Packages::sliver_enable                         F

# Log links found in email transferred over SMTP. Once loaded, this script will automatically 
# create a new log stream named "smtp_links".
Packages::smtp_links_enable                     F
# turns on optional setting of the urls field in smtp.log
Packages::smtp_links_log_urls                   F
# turns on optional setting of the domains columns in smtp.log(if log_urls is turned on) and domain
# column in smtp_links.log
Packages::smtp_links_log_domains                T

# ---- Packages below here add information to existing logs ----

# Add Community ID flow hash field to the "conn" log stream.
Packages::community_id_enable                   F

# Add SHA256 hashes to the "files" log stream.
Packages::file_sha256_enable                    F

# Add a POST body excerpt into the HTTP log.
Packages::log_add_http_post_bodies_enable       F

# Add MAC addresses to the connection log.
Packages::mac_logging_enable                    F

# Add VLAN information to the connection log.
Packages::vlan_logging_enable                   F

# Add VPN activity classification to "vpn" log stream
CorelightPackages::vpn_insights_enable          F

# This package is for Zeek to help network analysts improve Zeek by using their network to discover
# unknown file types. It creates a log stream named "unknown_mime_type_discovery" and will log a 
# small amount of the beginning of files that weren't identified by their content.
Packages::unknown_mime_type_discovery_enable    F

# This enables a script that is shipped with Zeek that mines HTTP hosts and user agents for known 
# Windows patterns, and maps them to corresponding versions that get reported to the "software"
# log stream.
Packages::windows_version_detection_enable      F

# Detect and decrypt XOR-obfuscated Windows EXEs
Packages::zeek_xor_enable                       F


#####################
# Suricata Settings #
#####################

# Enable or disable Suricata
Suricata::enable       F

# The absolute path to the directory where your rule files are stored.
Suricata::rule_path    /etc/corelight/rules/

# A list of rules to load from the Suricata::rule_path directory.
Suricata::rule_files   *.rules

# Include the matched packet content into the "suricata_corelight" log. 
Suricata::packet_content_enable   F

# Include the matched payload body into the "suricata_corelight" log. 
Suricata::payload_content_enable  F


##############################
# Zeek Intelligence Matching #
##############################

Corelight::intel_file     /etc/corelight/intel/corelight-example.dat

# Don't like a staid, stale, and outdated intel file?
# Set the intel_download_url to download your fresh intel file from the web!
Corelight::intel_download_url


############################################# 
# Streaming Exporter configs are below here #
#############################################

# JSON into Splunk's HEC (HTTP Event Collector) API
Corelight::hec_enable            F
Corelight::hec_url               https://mysplunk.com:8088/services/collector
Corelight::hec_token              
# Transform types can reduce Splunk license usage by moving the full json out of the indexed  
# data but without behavior degradation. Generally, all queries and dashboards should continue 
# to work even with transformed data. 
# If data is being sent to Splunk, the recommended selection is tsv-optimized.
# Valid options are none, tsv, and tsv-optimized.
Corelight::hec_transform_type    none
Corelight::hec_sourcetype_prefix  
Corelight::hec_verify_cert       T

# JSON into CrowdStrike Falcon LogScale example,
#Corelight::hec_enable            T
#Corelight::hec_url               https://cloud.community.humio.com/api/v1/ingest/hec
#Corelight::hec_token             SECRET_TOKEN_GOES_HERE
#Corelight::hec_transform_type    none
#Corelight::hec_sourcetype_prefix  
#Corelight::hec_verify_cert       T

# JSON into Elastic Agent Corelight integration input example,
#Corelight::hec_enable            T
#Corelight::hec_url               https://elastic-agent.your-domain.tld:80/corelight
#Corelight::hec_token             SECRET_TOKEN_GOES_HERE
#Corelight::hec_transform_type    none
#Corelight::hec_sourcetype_prefix  
#Corelight::hec_verify_cert       T

# JSON to a Kafka server
Corelight::kafka_enable          F
Corelight::kafka_servers         1.2.3.4:9092
Corelight::kafka_topic_template  $LOG
Corelight::kafka_enable_ssl      T
Corelight::kafka_sasl_username    
Corelight::kafka_sasl_password    
Corelight::kafka_ssl_ca_location  
Corelight::kafka_json_include_unset_fields F
Corelight::kafka_timestamp_source _write_ts

# JSON over TCP export
Corelight::json_enable       F
Corelight::json_server       1.2.3.4:12345

# JSON over TCP syslog export
Corelight::syslog_enable     F
Corelight::syslog_server     1.2.3.4:514
# This is a lower case syslog priority
Corelight::syslog_facility   local0
# This is a lower case syslog severity
Corelight::syslog_severity   info
# Valid optons are rfc5424_octet_framing, rfc5424_non_transparent, or rfc3164
Corelight::syslog_format     rfc5424_octet_framing

# JSON to a redis server.  This can only use the RPUSH command right now.
Corelight::redis_enable      F
Corelight::redis_host        127.0.0.1
Corelight::redis_port        6379
Corelight::redis_password    
# A string that will be prepended to the path name.  If you don't want it, you can leave this field blank.
Corelight::redis_key_prefix  corelight-

####################################
# Batch Log configs are below here #
####################################

# Global settings for batch logs
# This group of settings is not dynamic at the moment and the software sensor must
# be restarted in order to apply them.
Corelight::batch_log_format            json
Corelight::batch_log_rotation_interval 3600
Corelight::batch_log_gzip              F

# Enable/disable writing logs to the disk file system
#  T: Write batch logs to the disk file system, with rotation
#  F: Don't write any logs to the disk file system at all
Corelight::batch_log_disk_enable           F
# If this is a absolute path it will extract there, if relative, it is relative to the base directory
# defined above with (Corelight::disk_space).
Corelight::batch_log_disk_path             ./logs
# Enable this to make the software sensor automatically maintain disk utilization (only if batch_log_disk_enable is T)
Corelight::batch_log_disk_cleanup_enable   F
# Keep disk usage at the specified log storage location under a specified percentage.
Corelight::batch_log_disk_cleanup_pct_max  80

# Batch log export over SFTP
Corelight::batch_log_ssh_enable    F
# Following option are for "sftp"
Corelight::batch_log_ssh_mode      sftp
Corelight::batch_log_ssh_server    1.2.3.4
Corelight::batch_log_ssh_port      22
Corelight::batch_log_ssh_user      username
# Leave this empty is doing key based authentication
Corelight::batch_log_ssh_password  
# Point to a privkey file on disk or encode the privkey directy in this variable hex escaped. (i.e. \xFF)
Corelight::batch_log_ssh_privkey   
# Leave this empty if the key has no passphrase
Corelight::batch_log_ssh_privkey_passphrase  
# Path on the remote file system to write logs.  If relative path given, it will be relative to remote users home dir.
Corelight::batch_log_ssh_path      ./corelight-logs


# Settings to use the Zeek log policy framework to filter log entries
Corelight::filter_external_scans                F
Corelight::filter_simple_dns                    F
Corelight::filter_reverse_dns                   F

#########################################
# Extracted File configs are below here #
#########################################

# Global settings for extracted files
Corelight::extracted_files_max_bytes               5242880
# This is an additional way to provide a way to limit files that get extracted based on the "Corelight Filter Language"
#   Documentation for this variable and the language is forthcoming.
Corelight::extracted_files_filter                  

# Global settings to define the types of files to extract.
# Supported MIME types can be seen here: https://github.com/zeek/zeek/tree/master/scripts/base/frameworks/files/magic
# Specify desired mimetypes as a comma separated list and here is an example below:
#Corelight::extracted_files_mime_types             image/jpeg,text/html
Corelight::extracted_files_mime_types              
# These are groups of mimetypes and are added to any mime types above.
Corelight::extracted_files_group_archives          T
Corelight::extracted_files_group_executables       T
Corelight::extracted_files_group_flash             T
Corelight::extracted_files_group_java              T
Corelight::extracted_files_group_office_documents  T
Corelight::extracted_files_group_pdfs              T

# Extracted file export to local file system
Corelight::extracted_files_disk_enable          F
# If this is a absolute path it will extract there, if relative, it is relative to the base directory
# defined above with (Corelight::disk_space).
Corelight::extracted_files_disk_directory    ./extracted_files
# Enable this to make the software sensor automatically maintain disk utilization. (only if extracted_files_disk_enable is T)
Corelight::extracted_files_disk_cleanup_enable     F
# Keep disk usage at the specified file extraction location under a specified percentage.
Corelight::extracted_files_disk_cleanup_pct_max    80  

# Extracted file export over SFTP
Corelight::extracted_files_ssh_enable    F
# Following options are for "sftp"
Corelight::extracted_files_ssh_mode      sftp
Corelight::extracted_files_ssh_server    1.2.3.4
Corelight::extracted_files_ssh_port      22
Corelight::extracted_files_ssh_user      username
# Leave this empty is doing key based authentication
Corelight::extracted_files_ssh_password   
# Point to a privkey file on disk or encode the privkey directy in this variable hex escaped. (i.e. \xFF)
Corelight::extracted_files_ssh_privkey    
# Leave this empty if the key has no passphrase
Corelight::extracted_files_ssh_privkey_passphrase
# Path on the remote file system to write files.  If relative path given, it will be relative to remote users home dir.
Corelight::extracted_files_ssh_path      ./corelight-extracted-files


###############################
# Metrics Data Export config  #
###############################

# Prometheus metrics export
CorelightMetrics::prometheus_enable               F
# Set to T in order to produce metrics per process instead of overall totals.
CorelightMetrics::prometheus_metrics_per_process  F
CorelightMetrics::prometheus_listen               127.0.0.1:8989
